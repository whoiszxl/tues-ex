server:
  port: 9999
spring:
  application:
    name: monolith-tues-ex

  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: ENC(yQjR7rB+l+bE+9vLPcSpZNfxtQegBU5qBLSwtPlLdBHzNpE28tJq3btv6WMIIPP+28LomBkgZXbAA/KTLmT7ROnUlNpjDEuV7Uae1hDA1kS05x7SJKsKCD+/0E61ZIyp7cGNmc1FgJgmAeHLK4Q1M1V9+COjoKJB8/N/ewB9JmGeG1ZOxNz1PA6Msy1m1yMKxcDah9oa7Ow=)
    username: ENC(KL/vpOrra3OsvkoGO9VKnA==)
    password: ENC(fJ4mgRXE2KFNdt5riC0oYtG+LHA2Q4ex)

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
  redis:
    host: aliyun.whoiszxl.com
    port: 6379
    password: ENC(HckT7CIUqeogjP/2PdYeU2a1MX9NvHM1)

  kafka:
    bootstrap-servers: 47.103.198.122:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false

jasypt:
  encryptor:
    password: whoiszxy #配置EncryptPropertiesUtils工具类里填写的秘钥，最好在命令行注入参数


jwt:
  config:
    key: whoiszxl
    ttl: 36000000

aliyun:
  sms:
    mock: true
    accessKeyId:
    accessKeySecret:
    template_code: SMS_99220057
    sign_name: zxlvoid验证码


coin:
  btc:
    nodeurl: ENC(VA8Hl262vRjI7IqUuk3QhWM1h6TPC49kf3OSJz0KizFv1/RGB2XF9KPGyhI29/vzm8woTweWQ9A=) #节点地址,包含了RPC账号和密码
  eth:
    nodeurl: ENC(ILsRmQ+vPZHxRgNoMdX2BU/ouaPiSOGGJIHV7Aa1SixnpXKHuTzliDyebbdp8pEFfuI1rRqB7ah4C9+bLh3nSMfDMR6WYzRN) #节点地址,infura需包含PROJECT_ID
    keystorepath: D:/code/keystore
    keystorepassword: 123456